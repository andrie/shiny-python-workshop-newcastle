---
title: "UI Customization"
title-slide-attributes: 
  data-background-image:  images/shiny-for-python-newcastle.jpg
  data-background-position: bottom left
  data-background-size: cover
format:
  positconfslides-revealjs: 
    incremental: true
    chalkboard: true
    slide-number: c/t
    code-copy: true
    center-title-slide: false
    code-link: true
    highlight-style: a11y
    width: "1600"
    height: "900"
    filters:
      - positconfslides
    css: styles.css
---

```{python}
# | echo: false
import os

os.chdir("..")
from helpers import problem_tabs, include_shiny_folder, Quiz, multiple_choice_app

```

## Goals

- So far we've learned:
    - How to build an app
    - How Shiny renders things
- This session is all about how they look
- We're going to cover a lot of UI elements quickly
    - Just know that these exist
    - Don't worry too much about remembering how they work

## Why care about UI design?
- It's what your stakeholders care about!
- Good UI design simplifies your application code 
- Intuitive UIs mean fewer questions 

## Where we're headed

```{python}
# | echo: false
# | output: asis
include_shiny_folder(
    "apps/problem-sets/4-ui-customization/4.7-conditional-panel",
    file_name="app-solution.py",
    exclusions=["app.py"],
    components="viewer",
    viewer_height=500,
)
```

## Anatomy of Shiny's UI

:::: {.columns}
::: column
```{.python}
app_ui = ui.page_fluid(
    ui.panel_title("Hello Penguins!"),
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_slider("mass", "Mass"
            ),
            ui.input_action_button("reset", "Reset Slider"),
        ),
        ui.panel_main(
            ui.output_data_frame("table"),
        ),
    ),
)
```
:::
::: column
- The UI is separate from the server
- UI is made up of pure functions
    - You can break them into objects
    - You can create them with functions
- Opinionated
    - Your inputs get labels
    - Reasonable look and feel
- Customizable 
    - Everything can be styled with CSS
    - If you know JavaScript, you can use JavaScript
:::
::::

## Some nomenclature

- **Container functions**: organize **child** elements
- **Element functions**: generate a UI object like input and outputs
- **Child**: elements contained by a container function
- **Parent**: the container one level up from a particular element or container

## Element functions

```{.python code-line-numbers="2,5,7,10"}
app_ui = ui.page_fluid(
    ui.panel_title("Hello Penguins!"),
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_slider("mass", "Mass"
            ),
            ui.input_action_button("reset", "Reset Slider"),
        ),
        ui.panel_main(
            ui.output_data_frame("table"),
        ),
    ),
)
```

## Container functions

```{.python code-line-numbers="1,3,4,9"}
app_ui = ui.page_fluid(
    ui.panel_title("Hello Penguins!"),
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_slider("mass", "Mass"
            ),
            ui.input_action_button("reset", "Reset Slider"),
        ),
        ui.panel_main(
            ui.output_data_frame("table"),
        ),
    ),
)
```


## Container functions
- Some layout functions take any child elements and lay them out in order
    - `ui.page_fluid`
    - `ui.panel_sidebar`
    - `ui.panel_main`
- Some, like `layout_sidebar`, take specific children
    - `panel_sidebar` defines the sidebar
    - `panel_main` defines the main panel

## Navsets
- It's common to put apps in tabs
- We have a `navset_tab` function which organizes `ui.nav` containers into tabs
- `ui.nav` is itself a container and allows you lay out the things on the tab

## Navsets
::: {.nonincremental}
- It's common to put apps in tabs
- We have a set of `navset` functions which organize `ui.nav` containers in tabs
- `ui.nav` is itself a container and allows you lay out the things on the tab
:::
```{.python}
ui.navset_tab(
    ui.nav(
        "Tab1",
        ui.input_slider("slider", "Slider", 0, 100, 20),
    ),
    ui.nav("Tab2", ui.input_action_button("button", "Button")),
    ui.nav("Tab3", ui.input_action_button("button2", "Button 2")),
)
```

## Navset example

```{python}
# | echo: false
# | output: asis

include_shiny_folder(
    "apps/examples/4.0.0-navsets", components="viewer", viewer_height=500
)
```


## Your turn

Go to [exercises/8-navsets](../exercises/8-navsets.html) or run `apps/problem-sets/exercises/4-ui-customization/4.1-tabs` locally.


## Cards
- Cards are just small boxes which contain other elements
- Useful for grouping inputs and outputs
- "Dashboards" are just web apps in boxes
- Currently in experimental, import with `import shiny.experimental as x`
- Called with `x.ui.card`
- Cards can take `x.ui.card_header` and `x.ui.card_footer`

## Cards

```{.python code-line-numbers="4-8"}
import shiny.experimental as x

app_ui = ui.page_fluid(
    x.ui.card(
        x.ui.card_header("Slider card"),
        ui.input_slider("n", "N", 0, 100, 20),
        ui.output_text_verbatim("txt"),
    )
)
```

## Cards example
```{python}
# | echo: false
# | output: asis

include_shiny_folder(
    "apps/examples/4.0.0.0-cards", components="viewer", viewer_height=500
)
```

## Your turn

Go to [exercises/9-cards](../exercises/9-cards.html) or run `apps/problem-sets/exercises/4-ui-customization/4.2-cards` locally.


## Rows and columns
- Sidebars, navsets and cards are all special purpose containers
- What if you want to customize your layout more generally?
- What about?
    - Different screen sizes?
    - Mobile browsers? 
    - Different zoom levels?
    - Nested UI containers?
- What we need is a responsive way to specify the size of things
- Enter the bootstrap grid

## Bootstap grid
- Divide the screen into rows and columns 
- Row height expands to fit its children 
- Column width is relative to its parent 

## Bootstrap grid
![](images/bootstrap_image.png)

## Rows
![](images/bootstrap_image.png)

- The shiny `ui.row` container breaks your app into rows
- Rows always contain `ui.column` 

## Columns 
![](images/bootstrap_image.png)

- Imagine breaking up the parent container into 12 vertical sections
- Each column gets an integer **width** from 1-12 
- This defines how much of the parent the column occupies
- Reacts to screen size
- Why 12?

## Rows and columns

```{.python}
ui.row(
        ui.column(
            6,
            ui.output_text("txt"),
        ),
        ui.column(
            6,
            ui.output_plot("my_plot"),
            ),
        ),
    ),
```

## This is getting a bit complicated

- UIs can start to get complicated
- You can end up with deeply nested function calls
- Too many brackets
- Too many indents
- Luckily You can break UIs into variables and compose them

## UI functions are composable

```{.python}
import shiny.experimental as x

ui.navset_tab(
    ui.nav(
        "Tab1",
        x.ui.card(ui.output_plot("Plot")),
        ui.output_text("some_text"),
    ),
    ui.nav("Tab2", ui.output_data_frame("data")),
    ui.nav("Tab3", ui.output_image("image")),
)
```

## UI functions are composable

```{.python}
card1 = x.ui.card(ui.output_plot("Plot"))
tab1 = ui.nav(
    "Tab1",
    card1,
    ui.output_text("some_text"),
)
tab2 = ui.nav("Tab2", ui.output_data_frame("data"))
tab3 = ui.nav("Tab3", ui.output_image("image"))

ui = ui.fluid_page(ui.navset_tab(tab1, tab2, tab3))
```

## Your turn

Go to [exercises/10-layout](../exercises/10-layout.html) or run `apps/problem-sets/exercises/4-ui-customization/4.3-layout` locally.

## Review: Value boxes

- Value boxes are another experimental layout container
- Just like `x.ui.card()` 
- Called with `x.ui.value_box()`
- Useful for visually highlighting important numbers or text
- Usually contain `ui.output_text()` as a child element

## Your turn

Go to [exercises/11-value-boxes](../exercises/11-value-boxes.html) or run `apps/problem-sets/exercises/4-ui-customization/4.5-value-boxes` locally.

## Dynamic user interfaces

- Guide the user along a happy path
- If you don't want them to click on something, don't show it to them
- Much better to prevent errors than to handle them 

## Dynamic UI
```{python}
# | echo: false
# | output: asis

include_shiny_folder("apps/examples/4.1.1-dynamic-ui", components="viewer")
```


## Shiny Dynamic UI

1) **`render.ui`**: Generate UI elements on the server
2) **`ui.conditional_panel`**: Hide things on the browser
3) **`ui.update_*`**: Modify existing UI elements

## Dynamic UI

- UI elements can be generated like any other element
- Use `ui.ui_ouput()` in the UI object
- Use `@render.ui` on the server
- Function returns any `ui` element
- Referred to like a regular ui element

## Dynamic UI

```{.python}
app_ui = ui.page_fluid(
    ui.input_checkbox("show_checkbox", "Show Checkbox"),
    ui.panel_conditional(
        "input.show_checkbox",
        ui.input_checkbox("show_slider", "Show Slider"),
    ),
    ui.output_ui("dynamic_slider"),
)


def server(input, output, session):
    @output
    @render.ui
    def dynamic_slider():
        if input.show_slider():
            return ui.input_slider("n", "N", 0, 100, 20)


app = App(app_ui, server)
```

## Dynamic UI

```{.python code-line-numbers="7,12-17"}
app_ui = ui.page_fluid(
    ui.input_checkbox("show_checkbox", "Show Checkbox"),
    ui.panel_conditional(
        "input.show_checkbox",
        ui.input_checkbox("show_slider", "Show Slider"),
    ),
    ui.output_ui("dynamic_slider"),
)


def server(input, output, session):
    @output
    @render.ui
    def dynamic_slider():
        print(input.show_slider())
        if input.show_slider():
            return ui.input_slider("n", "N", 0, 100, 20)


app = App(app_ui, server)
```

## Dynamic UI

- Dynamic UIs can be intimidating, but they follow a familiar pattern:
    - Insert a UI element with `ui.output_ui`
    - Create a rendering function which returns a UI chunk
    - Decorate the function with `@output` and `render.ui`
- Very powerful, but 
    - Round trip to the server
    - You can lose session state

## Dynamic UI
```{python}
# | echo: false
# | output: asis

include_shiny_folder("apps/examples/4.1.1-dynamic-ui", components="viewer")
```

## Conditional panel
- `ui.panel_conditional` hides UI elements based on conditions
- Less flexible than `ui.output_ui`
- Preserves input state
- Doesn't require trip to the server

## Conditional panel

```{python}
# | echo: false
# | output: asis

include_shiny_folder("apps/examples/4.1.1-dynamic-ui", components="viewer")
```

## Conditional panel

```{.python code-line-numbers="3-6"}
app_ui = ui.page_fluid(
    ui.input_checkbox("show_checkbox", "Show Checkbox"),
    ui.panel_conditional(
        "input.show_checkbox",
        ui.input_checkbox("show_slider", "Show Slider"),
    ),
    ui.output_ui("dynamic_slider"),
)


def server(input, output, session):
    @output
    @render.ui
    def dynamic_slider():
        print(input.show_slider())
        if input.show_slider():
            return ui.input_slider("n", "N", 0, 100, 20)


app = App(app_ui, server)
```

## Things to note
- Uses JavaScript condition, not python
- JavaScript condition will be the same as R, Google and chatGPT can help
- You often want `===` 

## Your turn

Go to [exercises/12-layout](../exercises/12-layout.html) or run problems `4.6` and `4.7` in `apps/problem-sets/exercises/4-ui-customization/`.


## That's a lot of stuff!

- Shiny gives you a lot of power to customize your app
- Important to remember _that_ you can do these things, even if you forget _how_
- Learning to build intuitive UIs is a journey
- Ask for advice on Discord
